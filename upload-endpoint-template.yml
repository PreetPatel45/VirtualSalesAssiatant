AWSTemplateFormatVersion: '2010-09-09'
Description: CloudFormation template to create Lambda function, API Gateway, and IAM role for generating presigned URLs to upload documents to an existing S3 bucket.

Parameters:
  BucketName:
    Type: String
    Default: rag-documents-300615130599
    Description: Name of the existing S3 bucket for document uploads

Resources:
  # IAM Role for Lambda function
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: LambdaS3AccessPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:PutObject
                  - s3:GetObject
                Resource: !Sub 'arn:aws:s3:::${BucketName}/*'
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: '*'

  # Lambda Function to generate presigned URL
  PresignedUrlLambda:
    Type: AWS::Lambda::Function
    Properties:
      Handler: index.handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        ZipFile: |
          import json
          import boto3
          import os
          
          def handler(event, context):
              s3_client = boto3.client('s3')
              bucket_name = os.environ['BUCKET_NAME']
              
              # Extract filename and fileType from query parameters
              query_params = event.get('queryStringParameters', {}) or {}
              file_name = query_params.get('fileName', 'uploaded-file')
              file_type = query_params.get('fileType', 'text/plain')  # Default to text/plain
              
              try:
                  # Generate presigned URL for PUT operation
                  presigned_url = s3_client.generate_presigned_url(
                      'put_object',
                      Params={
                          'Bucket': bucket_name,
                          'Key': file_name,
                          'ContentType': file_type
                      },
                      ExpiresIn=3600  # URL expires in 1 hour
                  )
                  
                  return {
                      'statusCode': 200,
                      'headers': {
                          'Content-Type': 'application/json',
                          'Access-Control-Allow-Origin': '*',
                          'Access-Control-Allow-Methods': 'GET,OPTIONS',
                          'Access-Control-Allow-Headers': 'Content-Type'
                      },
                      'body': json.dumps({
                          'presignedUrl': presigned_url,
                          'fileName': file_name,
                          'contentType': file_type
                      })
                  }
              except Exception as e:
                  return {
                      'statusCode': 500,
                      'headers': {
                          'Content-Type': 'application/json',
                          'Access-Control-Allow-Origin': '*'
                      },
                      'body': json.dumps({'error': str(e)})
                  }
      Runtime: python3.9
      Timeout: 30
      Environment:
        Variables:
          BUCKET_NAME: !Ref BucketName

  # API Gateway
  UploadApi:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: DocumentUploadApi
      Description: API to generate presigned URLs for S3 uploads

  # API Gateway Resource
  UploadResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref UploadApi
      ParentId: !GetAtt UploadApi.RootResourceId
      PathPart: 'upload'

  # API Gateway GET Method
  UploadGetMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref UploadApi
      ResourceId: !Ref UploadResource
      HttpMethod: GET
      AuthorizationType: NONE
      Integration:
        Type: AWS
        IntegrationHttpMethod: POST
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${PresignedUrlLambda.Arn}/invocations'
        IntegrationResponses:
          - StatusCode: 200
            ResponseTemplates:
              application/json: '#set($inputRoot = $input.path(''$'')) $inputRoot'
      MethodResponses:
        - StatusCode: 200
          ResponseModels:
            application/json: Empty
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Headers: true

  # API Gateway OPTIONS Method for CORS
  UploadOptionsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref UploadApi
      ResourceId: !Ref UploadResource
      HttpMethod: OPTIONS
      AuthorizationType: NONE
      Integration:
        Type: MOCK
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            ResponseTemplates:
              application/json: '{}'
      MethodResponses:
        - StatusCode: 200
          ResponseModels:
            application/json: Empty
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true

  # Lambda Permission for API Gateway
  LambdaApiGatewayPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref PresignedUrlLambda
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${UploadApi}/*/*'

  # API Gateway Deployment
  ApiDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn:
      - UploadGetMethod
      - UploadOptionsMethod
    Properties:
      RestApiId: !Ref UploadApi
      StageName: prod

Outputs:
  ApiEndpoint:
    Description: API Gateway endpoint to generate presigned URLs
    Value: !Sub 'https://${UploadApi}.execute-api.${AWS::Region}.amazonaws.com/prod/upload'